{"ast":null,"code":"/* eslint-disable no-eval */\nlet operand1 = \"\";\nlet operand2 = \"\";\nlet operator = \"\";\n\nconst operate = (op1, oper, op2) => {\n  const a = parseFloat(op1);\n  const b = parseFloat(op2);\n\n  switch (oper) {\n    case \"+\":\n      return a + b;\n\n    case \"-\":\n      return a - b;\n\n    case \"*\":\n      return a * b;\n\n    case \"/\":\n      return a / b;\n\n    default:\n  }\n\n  return 0;\n};\n\nconst calculate = (currentValue, op, reset = false, toggle = false) => {\n  if (!reset) {\n    if (toggle && !currentValue && operand1) {\n      operand1 = String(parseFloat(operand1) * -1);\n    } else if (!operand1) {\n      // entering the first operand\n      operand1 = currentValue; // if just after entering operand, the user clicks the perc sign\n\n      if (op === \"%\") {\n        operand1 = parseFloat(operand1) / 100;\n      }\n\n      operator = op;\n    } else if (!operator) {\n      // used in case the user does any operation on the result\n      operator = op;\n    } else if (!operand2) {\n      // to skip multiple '=' press\n      if (!(operator === op && op === \"=\")) {\n        if (!(operator && (op === \"=\" || op === \"%\"))) {\n          operator = op;\n        } // only move ahead if there is some value entered, basically skipping multiple op presses\n\n\n        if (currentValue) {\n          operand2 = currentValue;\n\n          if (op === \"%\") {\n            operand2 = parseFloat(operand2) / 100;\n          } // set the result to operand1 as any more operations will make the result operand1\n\n\n          operand1 = +operate(operand1, operator, operand2).toFixed(3); // setting the operator and operand2 to default values for the next iteration\n\n          operand2 = \"\";\n          operator = op === \"=\" || op === \"%\" ? \"\" : op;\n        }\n      }\n    }\n\n    return String(operand1);\n  } // defaults on reset\n\n\n  operand1 = \"\";\n  operator = \"\";\n  operand2 = \"\";\n  return \"\";\n};\n\nexport default calculate;","map":{"version":3,"sources":["/home/vin/trainingCode/calculator/src/js/calculate.js"],"names":["operand1","operand2","operator","operate","op1","oper","op2","a","parseFloat","b","calculate","currentValue","op","reset","toggle","String","toFixed"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,CAAC,GAAGC,UAAU,CAACJ,GAAD,CAApB;AACA,QAAMK,CAAC,GAAGD,UAAU,CAACF,GAAD,CAApB;;AACA,UAAQD,IAAR;AACE,SAAK,GAAL;AACE,aAAOE,CAAC,GAAGE,CAAX;;AACF,SAAK,GAAL;AACE,aAAOF,CAAC,GAAGE,CAAX;;AACF,SAAK,GAAL;AACE,aAAOF,CAAC,GAAGE,CAAX;;AACF,SAAK,GAAL;AACE,aAAOF,CAAC,GAAGE,CAAX;;AACF;AATF;;AAWA,SAAO,CAAP;AACD,CAfD;;AAiBA,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,EAAf,EAAmBC,KAAK,GAAG,KAA3B,EAAkCC,MAAM,GAAG,KAA3C,KAAqD;AACrE,MAAI,CAACD,KAAL,EAAY;AACV,QAAIC,MAAM,IAAI,CAACH,YAAX,IAA2BX,QAA/B,EAAyC;AACvCA,MAAAA,QAAQ,GAAGe,MAAM,CAACP,UAAU,CAACR,QAAD,CAAV,GAAuB,CAAC,CAAzB,CAAjB;AACD,KAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpB;AACAA,MAAAA,QAAQ,GAAGW,YAAX,CAFoB,CAGpB;;AACA,UAAIC,EAAE,KAAK,GAAX,EAAgB;AACdZ,QAAAA,QAAQ,GAAGQ,UAAU,CAACR,QAAD,CAAV,GAAuB,GAAlC;AACD;;AACDE,MAAAA,QAAQ,GAAGU,EAAX;AACD,KARM,MAQA,IAAI,CAACV,QAAL,EAAe;AACpB;AACAA,MAAAA,QAAQ,GAAGU,EAAX;AACD,KAHM,MAGA,IAAI,CAACX,QAAL,EAAe;AACpB;AACA,UAAI,EAAEC,QAAQ,KAAKU,EAAb,IAAmBA,EAAE,KAAK,GAA5B,CAAJ,EAAsC;AACpC,YAAI,EAAEV,QAAQ,KAAKU,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAA1B,CAAV,CAAJ,EAA+C;AAC7CV,UAAAA,QAAQ,GAAGU,EAAX;AACD,SAHmC,CAIpC;;;AACA,YAAID,YAAJ,EAAkB;AAChBV,UAAAA,QAAQ,GAAGU,YAAX;;AACA,cAAIC,EAAE,KAAK,GAAX,EAAgB;AACdX,YAAAA,QAAQ,GAAGO,UAAU,CAACP,QAAD,CAAV,GAAuB,GAAlC;AACD,WAJe,CAKhB;;;AACAD,UAAAA,QAAQ,GAAG,CAACG,OAAO,CAACH,QAAD,EAAWE,QAAX,EAAqBD,QAArB,CAAP,CAAsCe,OAAtC,CAA8C,CAA9C,CAAZ,CANgB,CAOhB;;AACAf,UAAAA,QAAQ,GAAG,EAAX;AACAC,UAAAA,QAAQ,GAAIU,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAtB,GAA6B,EAA7B,GAAkCA,EAA7C;AACD;AACF;AACF;;AACD,WAAOG,MAAM,CAACf,QAAD,CAAb;AACD,GApCoE,CAqCrE;;;AACAA,EAAAA,QAAQ,GAAG,EAAX;AACAE,EAAAA,QAAQ,GAAG,EAAX;AACAD,EAAAA,QAAQ,GAAG,EAAX;AACA,SAAO,EAAP;AACD,CA1CD;;AA2CA,eAAeS,SAAf","sourcesContent":["/* eslint-disable no-eval */\nlet operand1 = \"\";\nlet operand2 = \"\";\nlet operator = \"\";\n\nconst operate = (op1, oper, op2) => {\n  const a = parseFloat(op1);\n  const b = parseFloat(op2);\n  switch (oper) {\n    case \"+\":\n      return a + b;\n    case \"-\":\n      return a - b;\n    case \"*\":\n      return a * b;\n    case \"/\":\n      return a / b;\n    default:\n  }\n  return 0;\n};\n\nconst calculate = (currentValue, op, reset = false, toggle = false) => {\n  if (!reset) {\n    if (toggle && !currentValue && operand1) {\n      operand1 = String(parseFloat(operand1) * -1);\n    } else if (!operand1) {\n      // entering the first operand\n      operand1 = currentValue;\n      // if just after entering operand, the user clicks the perc sign\n      if (op === \"%\") {\n        operand1 = parseFloat(operand1) / 100;\n      }\n      operator = op;\n    } else if (!operator) {\n      // used in case the user does any operation on the result\n      operator = op;\n    } else if (!operand2) {\n      // to skip multiple '=' press\n      if (!(operator === op && op === \"=\")) {\n        if (!(operator && (op === \"=\" || op === \"%\"))) {\n          operator = op;\n        }\n        // only move ahead if there is some value entered, basically skipping multiple op presses\n        if (currentValue) {\n          operand2 = currentValue;\n          if (op === \"%\") {\n            operand2 = parseFloat(operand2) / 100;\n          }\n          // set the result to operand1 as any more operations will make the result operand1\n          operand1 = +operate(operand1, operator, operand2).toFixed(3);\n          // setting the operator and operand2 to default values for the next iteration\n          operand2 = \"\";\n          operator = (op === \"=\" || op === \"%\") ? \"\" : op;\n        }\n      }\n    }\n    return String(operand1);\n  }\n  // defaults on reset\n  operand1 = \"\";\n  operator = \"\";\n  operand2 = \"\";\n  return \"\";\n};\nexport default calculate;\n"]},"metadata":{},"sourceType":"module"}