{"ast":null,"code":"import calculate from \"./calculate\";\nimport { isOperator, RESET, TOGGLESIGN } from \"./data\";\n\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let currentValue = currentState.currentValue;\n  const decimalAdded = currentState.decimalAdded,\n        result = currentState.result;\n\n  if (name === RESET) {\n    newState = {\n      currentValue: \"0\",\n      result: \"\"\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        result: calculate(currentValue, null, false, true)\n      };\n    } else {\n      newState = {\n        currentValue: String(parseFloat(currentValue) * -1)\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name)\n    };\n  } else {\n    if (currentValue === \"0\") {\n      currentValue = \"\";\n    }\n\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = {\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true\n        };\n      }\n    } else {\n      newState = {\n        currentValue: currentValue.concat(name),\n        result: \"\"\n      };\n    }\n  }\n\n  return newState;\n};\n\nexport default getNewState;","map":{"version":3,"sources":["/home/vin/trainingCode/calculator/src/js/getNewState.js"],"names":["calculate","isOperator","RESET","TOGGLESIGN","getNewState","name","currentState","newState","currentValue","decimalAdded","result","String","parseFloat","concat"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,UAA5B,QAA8C,QAA9C;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,YAAP,KAAwB;AAC1C,MAAIC,QAAQ,GAAG,IAAf;AAD0C,MAEpCC,YAFoC,GAEnBF,YAFmB,CAEpCE,YAFoC;AAAA,QAGlCC,YAHkC,GAGTH,YAHS,CAGlCG,YAHkC;AAAA,QAGpBC,MAHoB,GAGTJ,YAHS,CAGpBI,MAHoB;;AAI1C,MAAIL,IAAI,KAAKH,KAAb,EAAoB;AAClBK,IAAAA,QAAQ,GAAG;AACTC,MAAAA,YAAY,EAAE,GADL;AAETE,MAAAA,MAAM,EAAE;AAFC,KAAX;AAIAV,IAAAA,SAAS,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAT;AACD,GAND,MAMO,IAAIK,IAAI,KAAKF,UAAb,EAAyB;AAC9B,QAAIO,MAAJ,EAAY;AACVH,MAAAA,QAAQ,GAAG;AACTG,QAAAA,MAAM,EAAEV,SAAS,CAACQ,YAAD,EAAe,IAAf,EAAqB,KAArB,EAA4B,IAA5B;AADR,OAAX;AAGD,KAJD,MAIO;AACLD,MAAAA,QAAQ,GAAG;AACTC,QAAAA,YAAY,EAAEG,MAAM,CAACC,UAAU,CAACJ,YAAD,CAAV,GAA2B,CAAC,CAA7B;AADX,OAAX;AAGD;AACF,GAVM,MAUA,IAAIP,UAAU,CAACI,IAAD,CAAd,EAAsB;AAC3BE,IAAAA,QAAQ,GAAG;AACTC,MAAAA,YAAY,EAAE,EADL;AAETC,MAAAA,YAAY,EAAE,KAFL;AAGTC,MAAAA,MAAM,EAAEV,SAAS,CAACQ,YAAD,EAAeH,IAAf;AAHR,KAAX;AAKD,GANM,MAMA;AACL,QAAIG,YAAY,KAAK,GAArB,EAA0B;AACxBA,MAAAA,YAAY,GAAG,EAAf;AACD;;AACD,QAAIH,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAI,CAACI,YAAL,EAAmB;AACjBF,QAAAA,QAAQ,GAAG;AACTC,UAAAA,YAAY,EAAEA,YAAY,CAACK,MAAb,CAAoBR,IAApB,CADL;AAETK,UAAAA,MAAM,EAAE,EAFC;AAGTD,UAAAA,YAAY,EAAE;AAHL,SAAX;AAKD;AACF,KARD,MAQO;AACLF,MAAAA,QAAQ,GAAG;AACTC,QAAAA,YAAY,EAAEA,YAAY,CAACK,MAAb,CAAoBR,IAApB,CADL;AAETK,QAAAA,MAAM,EAAE;AAFC,OAAX;AAID;AACF;;AACD,SAAOH,QAAP;AACD,CA9CD;;AA+CA,eAAeH,WAAf","sourcesContent":["import calculate from \"./calculate\";\nimport { isOperator, RESET, TOGGLESIGN } from \"./data\";\n\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let { currentValue } = currentState;\n  const { decimalAdded, result } = currentState;\n  if (name === RESET) {\n    newState = {\n      currentValue: \"0\",\n      result: \"\",\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        result: calculate(currentValue, null, false, true),\n      };\n    } else {\n      newState = {\n        currentValue: String(parseFloat(currentValue) * -1),\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name),\n    };\n  } else {\n    if (currentValue === \"0\") {\n      currentValue = \"\";\n    }\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = {\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true,\n        };\n      }\n    } else {\n      newState = {\n        currentValue: currentValue.concat(name),\n        result: \"\",\n      };\n    }\n  }\n  return newState;\n};\nexport default getNewState;\n"]},"metadata":{},"sourceType":"module"}