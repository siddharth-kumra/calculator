{"ast":null,"code":"import _defineProperty from \"/home/vin/trainingCode/calculator/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport calculate from \"./calculate\";\nimport { isOperator, RESET, TOGGLESIGN } from \"./data\";\n\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let currentValue = currentState.currentValue;\n  const decimalAdded = currentState.decimalAdded,\n        result = currentState.result,\n        initial = currentState.initial;\n\n  if (name === RESET) {\n    newState = {\n      initial: true,\n      currentValue: \"0\",\n      result: \"\"\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        result: calculate(currentValue, null, false, true)\n      };\n    } else {\n      newState = {\n        currentValue: String(parseFloat(currentValue) * -1)\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name)\n    };\n  } else {\n    if (initial) {\n      currentValue = \"\";\n      newState = {\n        initial: false\n      };\n    }\n\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = _objectSpread({}, newState, {\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true\n        });\n      }\n    } else {\n      newState = _objectSpread({}, newState, {\n        currentValue: currentValue.concat(name),\n        result: \"\"\n      });\n    }\n  }\n\n  return newState;\n};\n\nexport default getNewState;","map":{"version":3,"sources":["/home/vin/trainingCode/calculator/src/js/getNewState.js"],"names":["calculate","isOperator","RESET","TOGGLESIGN","getNewState","name","currentState","newState","currentValue","decimalAdded","result","initial","String","parseFloat","concat"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,UAA5B,QAA8C,QAA9C;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,YAAP,KAAwB;AAC1C,MAAIC,QAAQ,GAAG,IAAf;AAD0C,MAEpCC,YAFoC,GAEnBF,YAFmB,CAEpCE,YAFoC;AAAA,QAGlCC,YAHkC,GAGAH,YAHA,CAGlCG,YAHkC;AAAA,QAGpBC,MAHoB,GAGAJ,YAHA,CAGpBI,MAHoB;AAAA,QAGZC,OAHY,GAGAL,YAHA,CAGZK,OAHY;;AAI1C,MAAIN,IAAI,KAAKH,KAAb,EAAoB;AAClBK,IAAAA,QAAQ,GAAG;AACTI,MAAAA,OAAO,EAAE,IADA;AAETH,MAAAA,YAAY,EAAE,GAFL;AAGTE,MAAAA,MAAM,EAAE;AAHC,KAAX;AAKAV,IAAAA,SAAS,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAT;AACD,GAPD,MAOO,IAAIK,IAAI,KAAKF,UAAb,EAAyB;AAC9B,QAAIO,MAAJ,EAAY;AACVH,MAAAA,QAAQ,GAAG;AACTG,QAAAA,MAAM,EAAEV,SAAS,CAACQ,YAAD,EAAe,IAAf,EAAqB,KAArB,EAA4B,IAA5B;AADR,OAAX;AAGD,KAJD,MAIO;AACLD,MAAAA,QAAQ,GAAG;AACTC,QAAAA,YAAY,EAAEI,MAAM,CAACC,UAAU,CAACL,YAAD,CAAV,GAA2B,CAAC,CAA7B;AADX,OAAX;AAGD;AACF,GAVM,MAUA,IAAIP,UAAU,CAACI,IAAD,CAAd,EAAsB;AAC3BE,IAAAA,QAAQ,GAAG;AACTC,MAAAA,YAAY,EAAE,EADL;AAETC,MAAAA,YAAY,EAAE,KAFL;AAGTC,MAAAA,MAAM,EAAEV,SAAS,CAACQ,YAAD,EAAeH,IAAf;AAHR,KAAX;AAKD,GANM,MAMA;AACL,QAAIM,OAAJ,EAAa;AACXH,MAAAA,YAAY,GAAG,EAAf;AACAD,MAAAA,QAAQ,GAAG;AACTI,QAAAA,OAAO,EAAE;AADA,OAAX;AAGD;;AACD,QAAIN,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAI,CAACI,YAAL,EAAmB;AACjBF,QAAAA,QAAQ,qBACHA,QADG;AAENC,UAAAA,YAAY,EAAEA,YAAY,CAACM,MAAb,CAAoBT,IAApB,CAFR;AAGNK,UAAAA,MAAM,EAAE,EAHF;AAIND,UAAAA,YAAY,EAAE;AAJR,UAAR;AAMD;AACF,KATD,MASO;AACLF,MAAAA,QAAQ,qBACHA,QADG;AAENC,QAAAA,YAAY,EAAEA,YAAY,CAACM,MAAb,CAAoBT,IAApB,CAFR;AAGNK,QAAAA,MAAM,EAAE;AAHF,QAAR;AAKD;AACF;;AACD,SAAOH,QAAP;AACD,CApDD;;AAqDA,eAAeH,WAAf","sourcesContent":["import calculate from \"./calculate\";\nimport { isOperator, RESET, TOGGLESIGN } from \"./data\";\n\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let { currentValue } = currentState;\n  const { decimalAdded, result, initial } = currentState;\n  if (name === RESET) {\n    newState = {\n      initial: true,\n      currentValue: \"0\",\n      result: \"\",\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        result: calculate(currentValue, null, false, true),\n      };\n    } else {\n      newState = {\n        currentValue: String(parseFloat(currentValue) * -1),\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name),\n    };\n  } else {\n    if (initial) {\n      currentValue = \"\";\n      newState = {\n        initial: false,\n      };\n    }\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = {\n          ...newState,\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true,\n        };\n      }\n    } else {\n      newState = {\n        ...newState,\n        currentValue: currentValue.concat(name),\n        result: \"\",\n      };\n    }\n  }\n  return newState;\n};\nexport default getNewState;\n"]},"metadata":{},"sourceType":"module"}