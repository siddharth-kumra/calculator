{"version":3,"sources":["Components/Display.jsx","Components/Button.jsx","js/data.js","Components/ButtonPanel.jsx","js/calculate.js","js/getNewState.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","value","operation","className","disabled","Button","this","handler","onClick","name","style","label","React","Component","defaultProps","color","backgroundColor","operators","labels","getLabel","operator","numbers","ButtonPanel","operand1","operand2","operate","op1","oper","op2","a","Big","b","plus","minus","times","div","calculate","currentValue","op","reset","toggle","toString","parseFloat","PE","getNewState","currentState","newState","decimalAdded","result","initial","warning","String","includes","Number","MAX_VALUE","concat","App","state","handleClick","bind","e","target","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d20525.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport \"./Styles/Display.css\";\n\nconst Display = (props) => {\n  const { value, operation } = props;\n  return (\n    <div className=\"display\">\n      <input value={value} disabled />\n      <div className=\"operation\">\n        {operation}\n      </div>\n    </div>\n  );\n};\n\nexport default Display;\n","/* eslint-disable no-useless-constructor */\n/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/button-has-type */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      onClick: handler, name, style, label,\n    } = this.props;\n    return (\n      <button name={name} onClick={handler} style={style}>\n        {label || name}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  style: PropTypes.oneOfType([PropTypes.object]),\n  label: PropTypes.string,\n};\n\nButton.defaultProps = {\n  style: {\n    color: \"black\",\n    backgroundColor: \"steelgray\",\n  },\n  label: \"\",\n};\nexport default Button;\n","export const operators = [\"=\", \"+\", \"-\", \"*\", \"/\", \"%\", \"+/-\", \"A/C\"];\nconst labels = {\n  \"=\": \"=\",\n  \"+\": \"+\",\n  \"*\": \"x\",\n  \"/\": \"รท\",\n  \"+/-\": \" \",\n};\nexport const getLabel = (operator) => labels[operator];\nexport const isOperator = (op) => operators.includes(op);\nexport const RESET = \"A/C\";\nexport const TOGGLESIGN = \"+/-\";\nexport const numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"./Button\";\nimport \"./Styles/ButtonPanel.css\";\nimport { operators, numbers, getLabel } from \"../js/data\";\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass ButtonPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.style = {\n      color: \"white\",\n      backgroundColor: \"#f5923e\",\n    };\n  }\n\n  render() {\n    const { handler } = this.props;\n    return (\n      <div className=\"panel\">\n        <div className=\"row\">\n          <Button name={operators[7]} onClick={handler} />\n          <Button name={operators[6]} onClick={handler} />\n          <Button name={operators[5]} onClick={handler} />\n          <Button\n            name={operators[4]}\n            onClick={handler}\n            label={getLabel(operators[4])}\n            style={this.style}\n          />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[7]} onClick={handler} />\n          <Button name={numbers[8]} onClick={handler} />\n          <Button name={numbers[9]} onClick={handler} />\n          <Button\n            name={operators[3]}\n            onClick={handler}\n            label={getLabel(operators[3])}\n            style={this.style}\n          />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[4]} onClick={handler} />\n          <Button name={numbers[5]} onClick={handler} />\n          <Button name={numbers[6]} onClick={handler} />\n          <Button name={operators[2]} onClick={handler} style={this.style} />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[1]} onClick={handler} />\n          <Button name={numbers[2]} onClick={handler} />\n          <Button name={numbers[3]} onClick={handler} />\n          <Button name={operators[1]} onClick={handler} style={this.style} />\n        </div>\n        <div className=\"lastRow\">\n          <Button name={numbers[0]} onClick={handler} />\n          <Button name={numbers[10]} onClick={handler} />\n          <Button name={operators[0]} onClick={handler} style={this.style} />\n        </div>\n      </div>\n    );\n  }\n}\nButtonPanel.propTypes = {\n  handler: PropTypes.func.isRequired,\n};\n\nexport default ButtonPanel;\n","import Big from \"big.js\";\n\nlet operand1 = \"\";\nlet operand2 = \"\";\nlet operator = \"\";\nconst operate = (op1, oper, op2) => {\n  const a = Big(op1);\n  const b = Big(op2);\n  switch (oper) {\n    case \"+\":\n      return a.plus(b);\n    case \"-\":\n      return a.minus(b);\n    case \"*\":\n      return a.times(b);\n    case \"/\":\n      return a.div(b);\n    default:\n  }\n  return 0;\n};\n\nconst calculate = (currentValue, op, reset = false, toggle = false) => {\n  if (!reset) {\n    if (toggle) {\n      operand1 = Big(operand1).times(-1).toString();\n    } else if (!(operand1 || operand1 === 0)) {\n      // entering the first operand\n      operand1 = currentValue;\n      // if just after entering operand, the user clicks the perc sign\n      if (op === \"%\") {\n        operand1 = parseFloat(operand1) / 100;\n      } else {\n        operator = op;\n      }\n    } else if (!operator) {\n      // used in case the user does any operation on the result\n      operator = op;\n    } else if (!operand2) {\n      // to skip multiple '=' press\n      if (!(operator === op && op === \"=\")) {\n      // only move ahead if there is some value entered, basically skipping multiple op presses\n        if (currentValue) {\n          operand2 = currentValue;\n          if (op === \"%\") {\n            operand2 = Big(operand2).div(100).toString();\n          }\n          // set the result to operand1 as any more operations will make the result operand1\n          operand1 = operate(operand1, operator, operand2).toString();\n          // setting the operator and operand2 to default values for the next iteration\n          operand2 = \"\";\n          operator = (op === \"=\" || op === \"%\") ? \"\" : op;\n        } else {\n          operator = op;\n        }\n      } else {\n        operator = \"\";\n      }\n    }\n    return operand1;\n  }\n  // defaults on reset\n  operand1 = \"\";\n  operator = \"\";\n  operand2 = \"\";\n  return \"\";\n};\nexport default calculate;\n","import Big from \"big.js\";\nimport calculate from \"./calculate\";\nimport {\n  isOperator, RESET, TOGGLESIGN, getLabel,\n} from \"./data\";\n\nBig.PE = 307;\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let { currentValue } = currentState;\n  const {\n    decimalAdded, result, initial, warning,\n  } = currentState;\n  if (warning) {\n    newState = {\n      warning: \"\",\n    };\n  }\n  if (name === RESET) {\n    newState = {\n      warning: \"\",\n      initial: true,\n      currentValue: \"0\",\n      result: \"\",\n      operation: \" \",\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        ...newState,\n        result: Big(calculate(currentValue, null, false, true)).toString(),\n      };\n    } else {\n      newState = {\n        ...newState,\n        currentValue: String(parseFloat(currentValue) * -1),\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      ...newState,\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name),\n      operation: getLabel(name) || name,\n    };\n  } else if (Number(currentValue) > Number.MAX_VALUE) {\n    newState = { ...currentState, warning: \"Threshold Reached\" };\n  } else {\n    if (initial) {\n      currentValue = \"\";\n      newState = {\n        ...newState,\n        initial: false,\n      };\n    }\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = {\n          ...newState,\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true,\n        };\n      }\n    } else {\n      newState = {\n        ...newState,\n        currentValue: currentValue.concat(name),\n        result: \"\",\n      };\n    }\n  }\n  return newState;\n};\nexport default getNewState;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from \"react\";\nimport Display from \"./Components/Display\";\nimport ButtonPanel from \"./Components/ButtonPanel\";\nimport getNewState from \"./js/getNewState\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // eslint-disable-next-line react/no-unused-state\n      initial: true,\n      currentValue: \"0\",\n      result: \"\",\n      operation: \" \",\n      warning: \"\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const { name } = e.target;\n    this.setState((currentState) => getNewState(name, currentState));\n  }\n\n  render() {\n    const {\n      currentValue, result, operation, warning,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        {warning}\n        <Display value={result || currentValue} operation={operation} />\n        <ButtonPanel handler={this.handleClick} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}