{"version":3,"sources":["Components/Display.jsx","Components/Button.jsx","js/data.js","Components/ButtonPanel.jsx","js/calculate.js","js/getNewState.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","value","className","disabled","Button","this","handler","onClick","name","style","label","React","Component","defaultProps","color","backgroundColor","operators","numbers","ButtonPanel","operand1","operand2","operator","operate","op1","oper","op2","a","parseFloat","b","calculate","currentValue","op","reset","toggle","String","toFixed","getNewState","currentState","newState","decimalAdded","result","initial","includes","concat","App","state","handleClick","bind","e","target","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ff6e0b8.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport \"./Styles/Display.css\";\n\nconst Display = (props) => {\n  const { value } = props;\n  return (\n    <div className=\"display\">\n      <input value={value} disabled />\n    </div>\n  );\n};\n\nexport default Display;\n","/* eslint-disable no-useless-constructor */\n/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/button-has-type */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      onClick: handler, name, style, label,\n    } = this.props;\n    return (\n      <button name={name} onClick={handler} style={style}>\n        {label || name}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  style: PropTypes.oneOfType([PropTypes.object]),\n  label: PropTypes.string,\n};\n\nButton.defaultProps = {\n  style: {\n    color: \"black\",\n    backgroundColor: \"steelgray\",\n  },\n  label: \"\",\n};\nexport default Button;\n","export const operators = [\"=\", \"+\", \"-\", \"*\", \"/\", \"%\", \"+/-\", \"A/C\"];\nexport const isOperator = (op) => operators.includes(op);\nexport const RESET = \"A/C\";\nexport const TOGGLESIGN = \"+/-\";\nexport const numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n","/* eslint-disable no-useless-constructor */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"./Button\";\nimport \"./Styles/ButtonPanel.css\";\nimport { operators, numbers } from \"../js/data\";\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass ButtonPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.style = {\n      color: \"white\",\n      backgroundColor: \"#f5923e\",\n    };\n  }\n\n  render() {\n    const { handler } = this.props;\n    return (\n      <div className=\"panel\">\n        <div className=\"row\">\n          <Button name={operators[7]} onClick={handler} />\n          <Button name={operators[6]} onClick={handler} />\n          <Button name={operators[5]} onClick={handler} />\n          <Button\n            name={operators[4]}\n            onClick={handler}\n            label=\"รท\"\n            style={this.style}\n          />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[7]} onClick={handler} />\n          <Button name={numbers[8]} onClick={handler} />\n          <Button name={numbers[9]} onClick={handler} />\n          <Button\n            name={operators[3]}\n            onClick={handler}\n            label=\"x\"\n            style={this.style}\n          />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[4]} onClick={handler} />\n          <Button name={numbers[5]} onClick={handler} />\n          <Button name={numbers[6]} onClick={handler} />\n          <Button name={operators[2]} onClick={handler} style={this.style} />\n        </div>\n        <div className=\"row\">\n          <Button name={numbers[1]} onClick={handler} />\n          <Button name={numbers[2]} onClick={handler} />\n          <Button name={numbers[3]} onClick={handler} />\n          <Button name={operators[1]} onClick={handler} style={this.style} />\n        </div>\n        <div className=\"lastRow\">\n          <Button name={numbers[0]} onClick={handler} />\n          <Button name={numbers[10]} onClick={handler} />\n          <Button name={operators[0]} onClick={handler} style={this.style} />\n        </div>\n      </div>\n    );\n  }\n}\nButtonPanel.propTypes = {\n  handler: PropTypes.func.isRequired,\n};\n\nexport default ButtonPanel;\n","let operand1 = \"\";\nlet operand2 = \"\";\nlet operator = \"\";\nconst operate = (op1, oper, op2) => {\n  const a = parseFloat(op1);\n  const b = parseFloat(op2);\n  switch (oper) {\n    case \"+\":\n      return a + b;\n    case \"-\":\n      return a - b;\n    case \"*\":\n      return a * b;\n    case \"/\":\n      return a / b;\n    default:\n  }\n  return 0;\n};\n\nconst calculate = (currentValue, op, reset = false, toggle = false) => {\n  if (!reset) {\n    if (toggle) {\n      operand1 = String(parseFloat(operand1) * -1);\n    } else if (!(operand1 || operand1 === 0)) {\n      // entering the first operand\n      operand1 = currentValue;\n      // if just after entering operand, the user clicks the perc sign\n      if (op === \"%\") {\n        operand1 = parseFloat(operand1) / 100;\n      } else {\n        operator = op;\n      }\n    } else if (!operator) {\n      // used in case the user does any operation on the result\n      operator = op;\n    } else if (!operand2) {\n      // to skip multiple '=' press\n      if (!(operator === op && op === \"=\")) {\n      // only move ahead if there is some value entered, basically skipping multiple op presses\n        if (currentValue) {\n          operand2 = currentValue;\n          if (op === \"%\") {\n            operand2 = parseFloat(operand2) / 100;\n          }\n          // set the result to operand1 as any more operations will make the result operand1\n          operand1 = +operate(operand1, operator, operand2).toFixed(3);\n          // setting the operator and operand2 to default values for the next iteration\n          operand2 = \"\";\n          operator = (op === \"=\" || op === \"%\") ? \"\" : op;\n        } else {\n          operator = op;\n        }\n      } else {\n        operator = \"\";\n      }\n    }\n    return String(operand1);\n  }\n  // defaults on reset\n  operand1 = \"\";\n  operator = \"\";\n  operand2 = \"\";\n  return \"\";\n};\nexport default calculate;\n","import calculate from \"./calculate\";\nimport { isOperator, RESET, TOGGLESIGN } from \"./data\";\n\nconst getNewState = (name, currentState) => {\n  let newState = null;\n  let { currentValue } = currentState;\n  const { decimalAdded, result, initial } = currentState;\n  if (name === RESET) {\n    newState = {\n      initial: true,\n      currentValue: \"0\",\n      result: \"\",\n    };\n    calculate(null, null, true);\n  } else if (name === TOGGLESIGN) {\n    if (result) {\n      newState = {\n        result: calculate(currentValue, null, false, true),\n      };\n    } else {\n      newState = {\n        currentValue: String(parseFloat(currentValue) * -1),\n      };\n    }\n  } else if (isOperator(name)) {\n    newState = {\n      currentValue: \"\",\n      decimalAdded: false,\n      result: calculate(currentValue, name),\n    };\n  } else {\n    if (initial) {\n      currentValue = \"\";\n      newState = {\n        initial: false,\n      };\n    }\n    if (name === \".\") {\n      if (!decimalAdded) {\n        newState = {\n          ...newState,\n          currentValue: currentValue.concat(name),\n          result: \"\",\n          decimalAdded: true,\n        };\n      }\n    } else {\n      newState = {\n        ...newState,\n        currentValue: currentValue.concat(name),\n        result: \"\",\n      };\n    }\n  }\n  return newState;\n};\nexport default getNewState;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from \"react\";\nimport Display from \"./Components/Display\";\nimport ButtonPanel from \"./Components/ButtonPanel\";\nimport getNewState from \"./js/getNewState\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // eslint-disable-next-line react/no-unused-state\n      initial: true,\n      currentValue: \"0\",\n      result: \"\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const { name } = e.target;\n    this.setState((currentState) => getNewState(name, currentState));\n  }\n\n  render() {\n    const { currentValue, result } = this.state;\n    return (\n      <div className=\"App\">\n        <Display value={result || currentValue} />\n        <ButtonPanel handler={this.handleClick} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}